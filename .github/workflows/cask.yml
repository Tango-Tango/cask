name: Build, Test, and Release

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    name: Cask Build and Test
    runs-on: ubuntu-20.04
    if: github.actor != 'engineering-at-tangotango'

    strategy:
      matrix:
        target: [debug, release]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ secrets.AUTOMATION_USER_TOKEN }}
      env:
        AUTOMATION_USER_TOKEN: secrets.AUTOMATION_USER_TOKEN
    - name: Update Apt Cache
      run: sudo apt-get update
    - name: Install Apt Development Dependencies
      run: sudo apt-get install -y ninja-build build-essential python3-pip gcovr cppcheck
    - name: Install Python Development Dependencies
      run: sudo python3 -m pip install meson==0.57.0
    - name: Run the Pre-Build Release Stage
      run: |
        git config user.name engineering-at-tangotango
        git config user.email engineering@tangotango.net
        ./automatic_release.py -u engineering-at-tangotango -o Tango-Tango -r cask -s pre-build
    - name: Generate the Build Environment
      run: ./regenerate_env.sh ${{ matrix.target }}
    - name: Build and Test
      working-directory: build_${{ matrix.target }}
      run: meson test --verbose
    - name: Generate Coverage Reports
      if: ${{ matrix.target == 'debug' }}
      run: ninja coverage -C build_${{ matrix.target }}
    - name: Upload Coverage Results to Codecov
      if: ${{ matrix.target == 'debug' }}
      uses: codecov/codecov-action@v1
      with:
        token: ${{ secrets.CODECOV_TOKEN }}
        fail_ci_if_error: true
    - name: Run cppcheck
      if: ${{ matrix.target == 'debug' }}
      run: ninja cppcheck -C build_${{ matrix.target }}
  
  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [build]
    if: contains(github.ref, 'master') && github.actor != 'engineering-at-tangotango'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ secrets.AUTOMATION_USER_TOKEN }}
      env:
        AUTOMATION_USER_TOKEN: secrets.AUTOMATION_USER_TOKEN
    - name: Tag Release in Git
      id: create-tag-release
      run: |
        git config user.name engineering-at-tangotango
        git config user.email engineering@tangotango.net
        ./automatic_release.py -u engineering-at-tangotango -o Tango-Tango -r cask -s post-build
    - name: Create Release in GitHub
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        name: "${{ steps.create-tag-release.outputs.version }}"
        tag_name: "${{ steps.create-tag-release.outputs.version }}"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      

