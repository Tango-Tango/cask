name: Build, Test, and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
    - 'src/**'
    - 'include/**'
    - 'meson.build'
    - 'VERSION'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '*.md'
    - '*.txt'
    - '.gitignore'
    - 'assets/**'

jobs:
  build-linux:
    name: Linux Build and Test
    runs-on: ubuntu-20.04
    if: github.actor != 'engineering-at-tangotango'

    strategy:
      matrix:
        target: [debug, release, release_no_atomics, release_always_async, clang, mips, arm]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Update Apt Cache
      run: sudo apt-get update
    - name: Install Apt Development Dependencies
      run: sudo apt-get install -y ninja-build build-essential python3-pip gcovr clang g++-10-arm-linux-gnueabihf g++-10-mipsel-linux-gnu qemu-user
    - name: Install Python Development Dependencies
      run: sudo python3 -m pip install meson==0.61.1
    - name: Generate the Build Environment
      run: ./regenerate_env.sh ${{ matrix.target }}
    - name: Build and Test
      working-directory: build_${{ matrix.target }}
      run: meson test --verbose
    - name: Generate Coverage Reports
      if: ${{ matrix.target == 'debug' }}
      run: ninja coverage -C build_${{ matrix.target }}
  
  build-mac:
    name: Mac Build and Test
    runs-on: [self-hosted, macOS, M1]
    if: github.actor != 'engineering-at-tangotango'

    strategy:
      matrix:
        target: [clang]
      fail-fast: false

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Generate the Build Environment
      run: ./regenerate_env.sh ${{ matrix.target }}
    - name: Build and Test
      working-directory: build_${{ matrix.target }}
      run: meson test --verbose
  
  analyze:
    name: Analyze
    runs-on: ubuntu-20.04
    if: github.actor != 'engineering-at-tangotango'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Update Apt Cache
      run: sudo apt-get update
    - name: Install Apt Development Dependencies
      run: sudo apt-get install -y ninja-build python3-pip gcovr cppcheck clang clang-tidy
    - name: Install Python Development Dependencies
      run: sudo python3 -m pip install meson==0.61.1
    - name: Generate the Build Environment
      run: ./regenerate_env.sh clang
    - name: Run clang-tidy
      run: ninja clang-tidy -C build_clang
  
  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [build-linux, build-mac, analyze]
    if: contains(github.ref, 'main') && github.actor != 'engineering-at-tangotango'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ secrets.AUTOMATION_USER_TOKEN }}
      env:
        AUTOMATION_USER_TOKEN: secrets.AUTOMATION_USER_TOKEN
    - name: Tag Release in Git
      id: create-tag-release
      run: |
        git config user.name engineering-at-tangotango
        git config user.email engineering@tangotango.net
        ./automatic_release.py -u engineering-at-tangotango -o Tango-Tango -r cask -s post-build
    - name: Create Release in GitHub
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        name: "${{ steps.create-tag-release.outputs.version }}"
        tag_name: "${{ steps.create-tag-release.outputs.version }}"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      

