name: Build, Test, and Release

on:
  workflow_dispatch:
  push:
    branches: [ main ]
    paths:
    - '.github/workflows/**'
    - 'src/**'
    - 'include/**'
    - 'meson.build'
    - 'VERSION'
  pull_request:
    branches: [ main ]
    paths-ignore:
    - '*.md'
    - '*.txt'
    - '.gitignore'
    - 'assets/**'

jobs:
  build-linux:
    name: Linux
    if: github.actor != 'engineering-at-tangotango'

    strategy:
      matrix:
        os: [ubuntu-20.04, ubuntu-22.04, ubuntu-24.04]
        target: [debug, release, release_no_atomics, release_forced_cede_disabled, clang, mips, arm]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Update Apt Cache
      run: sudo apt-get update
    - name: Install Apt Development Dependencies
      run: sudo apt-get install -y ninja-build build-essential python3-pip python3-venv pipx gcovr clang g++-arm-linux-gnueabihf g++-mipsel-linux-gnu qemu-user
    - name: Install Python Development Dependencies
      run: sudo pipx install meson==1.0.0
    - name: Generate the Build Environment
      run: ./regenerate_env.sh ${{ matrix.target }}
    - name: Compile
      working-directory: build_${{ matrix.target }}
      run: meson compile
    - name: Test
      working-directory: build_${{ matrix.target }}
      run:  meson test
    - name: Dump Compile Logs
      if: always()
      working-directory: build_${{ matrix.target }}
      run: cat meson-logs/meson-log.txt
    - name: Dump Test Logs
      if: always()
      working-directory: build_${{ matrix.target }}
      run: cat meson-logs/testlog.txt
  
  build-mac:
    name: MacOS
    if: github.actor != 'engineering-at-tangotango'

    strategy:
      matrix:
        os: [macos-14]
        target: [clang]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Install Brew Development Dependencies
      run: brew install ninja
    - name: Install Python Development Dependencies
      run: pipx install meson==1.0.0
    - name: Generate the Build Environment
      run: ./regenerate_env.sh ${{ matrix.target }}
    - name: Compile
      working-directory: build_${{ matrix.target }}
      run: meson compile
    - name: Test
      working-directory: build_${{ matrix.target }}
      run:  meson test
    - name: Dump Compile Logs
      if: always()
      working-directory: build_${{ matrix.target }}
      run: cat meson-logs/meson-log.txt
    - name: Dump Test Logs
      if: always()
      working-directory: build_${{ matrix.target }}
      run: cat meson-logs/testlog.txt

  build-windows:
    name: Windows
    if: github.actor != 'engineering-at-tangotango'

    strategy:
      matrix:
        os: [windows-2019, windows-2022]
      fail-fast: false

    runs-on: ${{ matrix.os }}

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Setup Python
      uses: actions/setup-python@v2
      with:
        python-version: '3.x'
    - name: Prepare MSVC
      uses: bus1/cabuild/action/msdevshell@v1
      with:
        architecture: x64
    - name: Install Python Development Dependencies
      run: python3 -m pip install meson==1.0.0 ninja
    - name: Generate the Build Environment
      run: meson setup builddir
    - name: Compile
      working-directory: builddir
      run: meson compile
  
  analyze:
    name: Analyze
    runs-on: ubuntu-20.04
    if: github.actor != 'engineering-at-tangotango'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ github.token }}
    - name: Update Apt Cache
      run: sudo apt-get update
    - name: Install Apt Development Dependencies
      run: sudo apt-get install -y ninja-build python3-pip gcovr cppcheck clang clang-tidy
    - name: Install Python Development Dependencies
      run: sudo python3 -m pip install meson==1.0.0
    - name: Generate the Build Environment
      run: ./regenerate_env.sh clang
    - name: Run clang-tidy
      run: ninja clang-tidy -C build_clang
  
  release:
    name: Release
    runs-on: ubuntu-20.04
    needs: [build-linux, build-mac, build-windows, analyze]
    if: contains(github.ref, 'main') && github.actor != 'engineering-at-tangotango'

    steps:
    - uses: actions/checkout@v2
      with:
        fetch-depth: 2
        token: ${{ secrets.AUTOMATION_USER_TOKEN }}
      env:
        AUTOMATION_USER_TOKEN: secrets.AUTOMATION_USER_TOKEN
    - name: Tag Release in Git
      id: create-tag-release
      run: |
        git config user.name engineering-at-tangotango
        git config user.email engineering@tangotango.net
        ./automatic_release.py -u engineering-at-tangotango -o Tango-Tango -r cask -s post-build >> $GITHUB_OUTPUT
    - name: Create Release in GitHub
      uses: softprops/action-gh-release@v1
      with:
        draft: false
        prerelease: false
        name: "${{ steps.create-tag-release.outputs.version }}"
        tag_name: "${{ steps.create-tag-release.outputs.version }}"
      env:
        GITHUB_TOKEN: "${{ secrets.GITHUB_TOKEN }}"
      

